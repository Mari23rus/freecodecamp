{"version":3,"sources":["App.js","serviceWorker.js","index.js","twitter-color.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","quote","author","index","handleClick","bind","assertThisInitialized","setState","Math","floor","random","length","text","tweetedText","encodeURIComponent","react_default","a","createElement","id","onClick","class","href","title","target","rel","src","twitter","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAwDeA,qBAnDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,CACN,CAACC,MAAO,wEACRC,OAAQ,aACR,CAACD,MAAO,gGACRC,OAAQ,yBACR,CAACD,MAAO,yFACRC,OAAQ,qBACR,CAACD,MAAO,mCACRC,OAAQ,oBACR,CAACD,MAAO,sEACRC,OAAQ,uBACR,CAACD,MAAO,uEACRC,OAAQ,eACR,CAACD,MAAO,kDACRC,OAAQ,cACR,CAACD,MAAO,oCACRC,OAAQ,sBAEVC,MAAO,GAETX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAvBFA,6EA0BjBG,KAAKY,SAAS,CACZJ,MAAOK,KAAKC,MAAMD,KAAKE,UAAUf,KAAKI,MAAMC,OAAOW,OAAO,uCAI5D,IAAMC,EAAOjB,KAAKI,MAAMC,OAAOL,KAAKI,MAAMI,OAAOF,MAC3CC,EAASP,KAAKI,MAAMC,OAAOL,KAAKI,MAAMI,OAAOD,OAC7CW,EAAcC,mBAAmB,IAAMF,EAAO,KAAOV,GAG3D,OACEa,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QAAQN,GACdG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUhB,GAClBa,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,QAASxB,KAAKS,aAArC,cACAW,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcE,MAAM,uBAAuBC,KAAM,+DAA+DR,EAAaS,MAAM,oBAAoBC,OAAO,SAASC,IAAI,uBAAsBT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBAAkBO,IAAKC,IAASC,IAAI,4BA5C7OC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ea2cc257.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport twitter from './twitter-color.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [\n        {quote: 'It is during our darkest moments that we must focus to see the light.',\n        author: 'Aristotle'},\n        {quote: 'One of the most beautiful qualities of true friendship is to understand and to be understood.',\n        author: 'Lucius Annaeus Seneca'},\n        {quote: 'Success is not final, failure is not fatal: it is the courage to continue that counts.',\n        author: 'Winston Churchill'},\n        {quote: 'Optimism is lack of information.',\n        author: 'Faina Ranevskaya'},\n        {quote: \"Life isn't about finding yourself. Life is about creating yourself.\",\n        author: 'George Bernard Shaw'},\n        {quote: 'All our dreams can come true, if we have the courage to pursue them.',\n        author: 'Walt Disney'},\n        {quote: 'The secret of getting ahead is getting started.',\n        author: 'Mark Twain'},\n        {quote: 'Learning never exhausts the mind.',\n        author: 'Leonardo da Vinci'}\n      ],\n      index: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      index: Math.floor(Math.random()*(this.state.quotes.length-1))\n    })\n  }\n  render() {\n    const text = this.state.quotes[this.state.index].quote;\n    const author = this.state.quotes[this.state.index].author;\n    const tweetedText = encodeURIComponent('\"' + text + '\" ' + author);\n\n\n    return (\n      <div id=\"container\">\n        <div id=\"quote-box\">\n          <q id=\"text\">{text}</q>\n          <div id=\"author\">{author}</div>\n          <div id=\"buttons\">\n            <button id=\"new-quote\" onClick={this.handleClick}>Next quote</button>\n            <a id=\"tweet-quote\" class=\"twitter-share-button\" href={\"https://twitter.com/intent/tweet?hashtags=quotemachine&text=\"+tweetedText} title=\"Tweet this quote!\" target=\"_blank\" rel=\"noopener noreferrer\"><img id=\"tweet-quote-img\" src={twitter} alt=\"Twitter icon\" /></a>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/twitter-color.79aee4eb.svg\";"],"sourceRoot":""}