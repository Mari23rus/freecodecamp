{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","bind","assertThisInitialized","playSound","document","addEventListener","removeEventListener","event","keyCode","triggerCode","displaySoundName","id","sound","getElementById","triggerKey","currentTime","play","react_default","a","createElement","className","onClick","src","concat","Component","App","state","currentSound","name","setState","src_DrumPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19f1d907.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DrumPad extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.handleKeyPress = this.handleKeyPress.bind(this);\r\n      this.playSound = this.playSound.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", this.handleKeyPress);\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\r\n    }\r\n    \r\n    handleKeyPress(event){\r\n        if(event.keyCode == this.props.triggerCode) this.playSound();\r\n    }\r\n\r\n    playSound(){\r\n        this.props.displaySoundName(this.props.id);\r\n        const sound = document.getElementById(this.props.triggerKey);\r\n        sound.currentTime = 0;\r\n        sound.play();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"drum-pad\" id={this.props.id} onClick={this.playSound}>\r\n                {this.props.triggerKey}\r\n                <audio id={this.props.triggerKey} className=\"clip\" src={`sounds/${this.props.id}.wav`}></audio>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DrumPad;","import React, { Component } from 'react';\nimport './App.css';\nimport DrumPad from './DrumPad';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {currentSound: ''}\n\n    this.displaySoundName = this.displaySoundName.bind(this);\n  }\n\n  displaySoundName(name) {\n    this.setState({\n      currentSound: name\n    })\n  }\n\n  // renderDrumPad(id, key, code) {\n  //   return <DrumPad id={id} triggerKey={key} triggerCode={code} displaySoundName={this.displaySoundName} />\n  // }\n\n  render() {    \n    return (\n      <div id=\"drum-machine\">\n        <div id=\"display\">{this.state.currentSound}</div>\n\n        <DrumPad id=\"clap\" triggerKey=\"Q\" triggerCode=\"81\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"hihat\" triggerKey=\"W\" triggerCode=\"87\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"kick\" triggerKey=\"E\" triggerCode=\"69\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"openhat\" triggerKey=\"A\" triggerCode=\"65\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"boom\" triggerKey=\"S\" triggerCode=\"83\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"ride\" triggerKey=\"D\" triggerCode=\"68\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"snare\" triggerKey=\"Z\" triggerCode=\"90\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"tom\" triggerKey=\"X\" triggerCode=\"88\" displaySoundName={this.displaySoundName} />\n        <DrumPad id=\"tink\" triggerKey=\"C\" triggerCode=\"67\" displaySoundName={this.displaySoundName} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}